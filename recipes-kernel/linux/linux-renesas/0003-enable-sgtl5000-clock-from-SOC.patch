From 4ef8c96f38c11d6de45bf1e5b83d065370d17154 Mon Sep 17 00:00:00 2001
From: Matteo Lisi <matteo.lisi@engicam.com>
Date: Thu, 15 Jul 2021 10:00:11 +0200
Subject: [PATCH 3/3] enable sgtl5000 clock from SOC

---
 sound/soc/sh/rcar/adg.c | 64 ++++++++++++++++++++++++++++++++++++-----
 1 file changed, 57 insertions(+), 7 deletions(-)

diff --git a/sound/soc/sh/rcar/adg.c b/sound/soc/sh/rcar/adg.c
index adf5bf02461a..d2bc1dd57572 100644
--- a/sound/soc/sh/rcar/adg.c
+++ b/sound/soc/sh/rcar/adg.c
@@ -3,7 +3,6 @@
 // Helper routines for R-Car sound ADG.
 //
 //  Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
-
 #include <linux/clk-provider.h>
 #include "rsnd.h"
 
@@ -38,6 +37,8 @@ struct rsnd_adg {
 
 	int rbga_rate_for_441khz; /* RBGA */
 	int rbgb_rate_for_48khz;  /* RBGB */
+
+	int rbga_for_random_rate;  /* RBGA */
 };
 
 #define LRCLK_ASYNC	(1 << 0)
@@ -345,6 +346,9 @@ int rsnd_adg_clk_query(struct rsnd_priv *priv, unsigned int rate)
 	if (rate == adg->rbgb_rate_for_48khz)
 		return 0x20;
 
+	if (rate == adg->rbga_for_random_rate)
+		return 0x10;
+
 	return -EIO;
 }
 
@@ -363,6 +367,7 @@ int rsnd_adg_ssi_clk_try_start(struct rsnd_mod *ssi_mod, unsigned int rate)
 	struct rsnd_mod *adg_mod = rsnd_mod_get(adg);
 	int data;
 	u32 ckr = 0;
+	int clkout_rate;
 
 	data = rsnd_adg_clk_query(priv, rate);
 	if (data < 0)
@@ -378,14 +383,27 @@ int rsnd_adg_ssi_clk_try_start(struct rsnd_mod *ssi_mod, unsigned int rate)
 			ckr = 0x80000000;
 	}
 
-	rsnd_mod_bset(adg_mod, BRGCKR, 0x80770000, adg->ckr | ckr);
+	if (!adg->rbga_for_random_rate)
+		rsnd_mod_bset(adg_mod, BRGCKR, 0x80770000, adg->ckr | ckr);
+	else
+		rsnd_mod_write(adg_mod, BRGCKR, 0x2320000);
 	rsnd_mod_write(adg_mod, BRRA,  adg->rbga);
 	rsnd_mod_write(adg_mod, BRRB,  adg->rbgb);
 
-	dev_dbg(dev, "CLKOUT is based on BRG%c (= %dHz)\n",
+	/*dev_dbg(dev, "CLKOUT is based on BRG%c (= %dHz)\n",
 		(ckr) ? 'B' : 'A',
 		(ckr) ?	adg->rbgb_rate_for_48khz :
-			adg->rbga_rate_for_441khz);
+			adg->rbga_rate_for_441khz);*/
+	if(ckr)
+		clkout_rate = adg->rbgb_rate_for_48khz;
+	else {
+		if (adg->rbga_rate_for_441khz)
+			clkout_rate = adg->rbga_rate_for_441khz;
+		else
+			clkout_rate = adg->rbga_for_random_rate;
+	}
+	dev_dbg(dev, "CLKOUT is based on BRG%c (= %dHz)\n",
+		(ckr) ? 'B' : 'A', clkout_rate);
 
 	return 0;
 }
@@ -443,6 +461,8 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
 	u32 req_rate[REQ_SIZE] = {};
 	uint32_t count = 0;
 	unsigned long req_48kHz_rate, req_441kHz_rate;
+	unsigned long req_random_rate;
+
 	int i, req_size;
 	const char *parent_clk_name = NULL;
 	static const char * const clkout_name[] = {
@@ -480,11 +500,15 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
 	of_property_read_u32_array(np, "clock-frequency", req_rate, req_size);
 	req_48kHz_rate = 0;
 	req_441kHz_rate = 0;
+	req_random_rate = 0;
+
 	for (i = 0; i < req_size; i++) {
 		if (0 == (req_rate[i] % 44100))
 			req_441kHz_rate = req_rate[i];
-		if (0 == (req_rate[i] % 48000))
+		else if (0 == (req_rate[i] % 48000))
 			req_48kHz_rate = req_rate[i];
+		else
+			req_random_rate = req_rate[i];
 	}
 
 	if (req_rate[0] % 48000 == 0)
@@ -504,6 +528,8 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
 	 */
 	adg->rbga_rate_for_441khz	= 0;
 	adg->rbgb_rate_for_48khz	= 0;
+	adg->rbga_for_random_rate	= 0;
+
 	for_each_rsnd_clk(clk, adg, i) {
 		rate = clk_get_rate(clk);
 
@@ -527,7 +553,7 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
 		}
 
 		/* RBGB */
-		if (!adg->rbgb_rate_for_48khz && (0 == rate % 48000)) {
+		else if (!adg->rbgb_rate_for_48khz && (0 == rate % 48000)) {
 			div = 6;
 			if (req_48kHz_rate)
 				div = rate / req_48kHz_rate;
@@ -541,6 +567,20 @@ static void rsnd_adg_get_clkout(struct rsnd_priv *priv,
 					parent_clk_name = __clk_get_name(clk);
 			}
 		}
+
+		/* BRRA, non-standard rate*/
+		else {
+			/* to output 25MHz from ZA2-200MHz, we need a rbga of 3 
+			 * see UM 43.2.1 BRGA Baud Rate Setting Register (BRRA) */
+			if (req_random_rate) {
+				div = 16; /* div = 2*(rbga+1) */
+				rbga = 7;
+
+				adg->rbga_for_random_rate = rate / div;
+				ckr |= brg_table[CLKI] << 20;
+				parent_clk_name = __clk_get_name(clk);
+			}
+		}
 	}
 
 	/*
@@ -597,6 +637,7 @@ static void rsnd_adg_clk_dbg_info(struct rsnd_priv *priv, struct rsnd_adg *adg)
 	dev_dbg(dev, "BRGCKR = 0x%08x, BRRA/BRRB = 0x%x/0x%x\n",
 		adg->ckr, adg->rbga, adg->rbgb);
 	dev_dbg(dev, "BRGA (for 44100 base) = %d\n", adg->rbga_rate_for_441khz);
+	dev_dbg(dev, "BRGA (for random rate) = %d\n", adg->rbga_for_random_rate);
 	dev_dbg(dev, "BRGB (for 48000 base) = %d\n", adg->rbgb_rate_for_48khz);
 
 	/*
@@ -616,7 +657,8 @@ int rsnd_adg_probe(struct rsnd_priv *priv)
 	struct rsnd_adg *adg;
 	struct device *dev = rsnd_priv_to_dev(priv);
 	int ret;
-
+	struct rsnd_mod *adg_mod; 
+	
 	adg = devm_kzalloc(dev, sizeof(*adg), GFP_KERNEL);
 	if (!adg)
 		return -ENOMEM;
@@ -632,6 +674,14 @@ int rsnd_adg_probe(struct rsnd_priv *priv)
 
 	priv->adg = adg;
 
+	if (adg->rbga_for_random_rate) {
+		adg_mod = rsnd_mod_get(adg);
+		/* Select ZA2 ==> BRGA ==> audio_clkout, audio_clkout0/1/2/3 */
+		rsnd_mod_write(adg_mod, BRGCKR, 0x2320000);
+		rsnd_mod_write(adg_mod, BRRA,  adg->rbga);
+		rsnd_mod_write(adg_mod, BRRB,  adg->rbgb);
+	}
+
 	rsnd_adg_clk_enable(priv);
 
 	return 0;
-- 
2.17.1

